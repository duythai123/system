package capstone_project.av_service.controller;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.google.common.hash.HashCode;
import com.google.common.hash.Hashing;
import com.google.common.io.Files;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

import capstone_project.av_service.config.WrapperLoggerFactory;
import capstone_project.av_service.constant.BusinessConstant;
import capstone_project.av_service.controller.error.BussinessException;
import capstone_project.av_service.model.Malware;
import capstone_project.av_service.model.MalwareRequestDto;
import capstone_project.av_service.service.MalwareService;
import capstone_project.av_service.utils.ClamAVClient;
import capstone_project.av_service.utils.IntegrationUtil;
import io.swagger.annotations.ApiOperation;

@RestController
@RequestMapping("/api/av")
public class MalwareController {
	
	// Create logger for another class
	private static final Logger logger = WrapperLoggerFactory.getLogger();

	private Gson gson = new GsonBuilder().setPrettyPrinting().create();
	
	@Value("${cuckoo.service.api}")
	private String CUCKOO_API_URL;
	
	@Value("${clamav.port}")
	private String CLAMAV_PORT;
	
	@Autowired
	private MalwareService malwareService;

	@ApiOperation(value = "createMalware")
	@PostMapping(value = "/createMalware")
	public ResponseEntity<?> createMalware(HttpServletResponse response,
			@RequestBody MalwareRequestDto malwareRequestDto) throws Exception {
		String imei = malwareRequestDto.getImei();
		if (!imei.matches("^[a-f0-9]{32}$")) {
			throw new BussinessException("MD5 is not validate format");
		}
		logger.info("begin createMalware");
		return new ResponseEntity<>(malwareService.createMalware(malwareRequestDto).toMessageResDto("Created malware"), HttpStatus.OK);
	}

	@ApiOperation(value = "Get Malware by md5")
	@GetMapping(value = "/getByMD5")
	public ResponseEntity<?> getByImei(@RequestParam("md5") String md5) throws Exception {
		Malware malware = malwareService.getMalwareByImei(md5);
		if (malware == null)
			throw new BussinessException("Dont have this malware :" + md5);
		return new ResponseEntity<>(malware.toMessageResDto("Got malware"), HttpStatus.OK);
	}

	@ApiOperation(value = "Scan by file")
	@PostMapping(value = "/scanFile")
	public @ResponseBody ResponseEntity<?> handleFileUpload(@RequestParam("name") String name,
			@RequestParam("file") MultipartFile file) throws Exception {
		if (!file.isEmpty()) {
				//read splited file
				File outPutFile = new File(name); 
				byte[] bytes = file.getBytes();
				BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(outPutFile));
				stream.write(bytes);
				stream.close();

				//hash file into md5
				HashCode hash = Files.hash(outPutFile, Hashing.md5());
				String imei = hash.toString();
				System.out.println(imei);
				
				//check md5 in AVservice db
				Malware malware = malwareService.getMalwareByImei(imei);

				if (malware == null) {
					// Init ClamAv client
					ClamAVClient cl = new ClamAVClient("localhost", Integer.parseInt(CLAMAV_PORT));
					byte[] reply;

					try {
						InputStream targetStream = new FileInputStream(outPutFile);
						
						//Scan file with clamAV
						reply = cl.scan(targetStream);
					} catch (Exception e) {
						throw new RuntimeException("Could not scan the input", e);
					}
					
					// Get clamav reponse as string
					String clamAvResponse = ClamAVClient.isCleanReply(reply);
					
					//Check clamAV response
					if (!(clamAvResponse.contains("OK") && !clamAvResponse.contains("FOUND"))) {
						List<String> companyList = new ArrayList<String>();
						companyList.add(BusinessConstant.Company.AV_SYSTEM);
						String malwareName = clamAvResponse.substring(8, clamAvResponse.length() - 6);
						
						//Create new Malware from ClamAV result into AVDB
						MalwareRequestDto malwareRequestDto = new MalwareRequestDto(imei, malwareName, 1);
						Malware malwareResDto = malwareService.createMalware(malwareRequestDto);
						
						return new ResponseEntity<>(malwareResDto.toMessageResDto("Scanned By ClamAV, added into AVSystemDB"), HttpStatus.OK);
					}
					
					// Call Cuckoo API
					return IntegrationUtil.callHttpPostWithFile(CUCKOO_API_URL + "/tasks/create/file", outPutFile, "Bearer JJlvRrikFrU5KT18gdshkA");
					
				} else {
					return new ResponseEntity<>(malware.toMessageResDto("Scanned by AVSystem"), HttpStatus.OK);
				}
		} else {
			throw new BussinessException("You must upload non-empty file");
		}
	}
	
	@ApiOperation(value = "Cuckoo Result by Id")
	@GetMapping(value = "/getCuckooResultById")
	public ResponseEntity<?> getCuckooResultById(@RequestParam("id") String id) throws Exception {
		ResponseEntity response = IntegrationUtil.callHttpGet(CUCKOO_API_URL + "/tasks/report/" + id, null, "Bearer JJlvRrikFrU5KT18gdshkA");
		JsonObject jsonObject = new JsonParser().parse((String) response.getBody()).getAsJsonObject();
		JsonObject responseJson = new JsonObject();
		responseJson.add("info", jsonObject.get("info"));
		responseJson.add("target", jsonObject.get("target"));
		responseJson.add("signatures", jsonObject.get("signatures"));
		responseJson.add("network", jsonObject.get("network"));
		responseJson.add("behavior", jsonObject.get("behavior"));
		return new ResponseEntity<>(gson.toJson(responseJson), HttpStatus.OK);
	}

}
